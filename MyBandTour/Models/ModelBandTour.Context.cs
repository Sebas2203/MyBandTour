//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyBandTour.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MyBandTourEntities : DbContext
    {
        public MyBandTourEntities()
            : base("name=MyBandTourEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Bandas> Bandas { get; set; }
        public virtual DbSet<Conciertos> Conciertos { get; set; }
        public virtual DbSet<Generos> Generos { get; set; }
        public virtual DbSet<Paises> Paises { get; set; }
        public virtual DbSet<Usuarios> Usuarios { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
    
        public virtual int sp_AgregarConcierto(string nombre_Banda, string nombre_Genero, Nullable<System.DateTime> fechaHora_Concierto, string nombre_Pais, string direccion, string poster_URL, ObjectParameter resultado)
        {
            var nombre_BandaParameter = nombre_Banda != null ?
                new ObjectParameter("nombre_Banda", nombre_Banda) :
                new ObjectParameter("nombre_Banda", typeof(string));
    
            var nombre_GeneroParameter = nombre_Genero != null ?
                new ObjectParameter("nombre_Genero", nombre_Genero) :
                new ObjectParameter("nombre_Genero", typeof(string));
    
            var fechaHora_ConciertoParameter = fechaHora_Concierto.HasValue ?
                new ObjectParameter("fechaHora_Concierto", fechaHora_Concierto) :
                new ObjectParameter("fechaHora_Concierto", typeof(System.DateTime));
    
            var nombre_PaisParameter = nombre_Pais != null ?
                new ObjectParameter("nombre_Pais", nombre_Pais) :
                new ObjectParameter("nombre_Pais", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var poster_URLParameter = poster_URL != null ?
                new ObjectParameter("poster_URL", poster_URL) :
                new ObjectParameter("poster_URL", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AgregarConcierto", nombre_BandaParameter, nombre_GeneroParameter, fechaHora_ConciertoParameter, nombre_PaisParameter, direccionParameter, poster_URLParameter, resultado);
        }
    
        public virtual ObjectResult<sp_BuscarConciertos_Result> sp_BuscarConciertos(string nombre_Banda, string pais)
        {
            var nombre_BandaParameter = nombre_Banda != null ?
                new ObjectParameter("nombre_Banda", nombre_Banda) :
                new ObjectParameter("nombre_Banda", typeof(string));
    
            var paisParameter = pais != null ?
                new ObjectParameter("pais", pais) :
                new ObjectParameter("pais", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BuscarConciertos_Result>("sp_BuscarConciertos", nombre_BandaParameter, paisParameter);
        }
    
        public virtual int sp_EliminarConcierto(Nullable<int> id_Concierto, ObjectParameter resultado)
        {
            var id_ConciertoParameter = id_Concierto.HasValue ?
                new ObjectParameter("id_Concierto", id_Concierto) :
                new ObjectParameter("id_Concierto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EliminarConcierto", id_ConciertoParameter, resultado);
        }
    
        public virtual ObjectResult<sp_ListarConciertos_Result> sp_ListarConciertos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ListarConciertos_Result>("sp_ListarConciertos");
        }
    
        public virtual int sp_Autenticar(string usuario, string password, ObjectParameter resultado)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Autenticar", usuarioParameter, passwordParameter, resultado);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }

        internal object sp_BuscarConciertos(int idConcierto, string nombreBanda)
        {
            throw new NotImplementedException();
        }
    }
}
